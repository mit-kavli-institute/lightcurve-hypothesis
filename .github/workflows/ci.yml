name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch:  # Allow manual triggers

jobs:
  tests:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11', '3.12', '3.13']
        include:
          # Test on other OS with latest Python
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-test-

      - name: Cache nox environments
        uses: actions/cache@v4
        with:
          path: .nox
          key: ${{ runner.os }}-nox-test-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'noxfile.py') }}
          restore-keys: |
            ${{ runner.os }}-nox-test-${{ matrix.python-version }}-

      - name: Install nox
        run: |
          python -m pip install --upgrade pip
          pip install nox

      - name: Run tests with nox
        run: nox -s tests -p ${{ matrix.python-version }}

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

  lint:
    name: Linting and Type Checking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-

      - name: Cache nox environments
        uses: actions/cache@v4
        with:
          path: .nox
          key: ${{ runner.os }}-nox-lint-${{ hashFiles('pyproject.toml', 'noxfile.py') }}
          restore-keys: |
            ${{ runner.os }}-nox-lint-

      - name: Install nox
        run: |
          python -m pip install --upgrade pip
          pip install nox

      - name: Run linters with nox
        run: nox -s lint

  check-manifest:
    name: Check Package Manifest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload built packages
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  # Summary job that other jobs can depend on
  all-checks:
    name: All CI Checks
    runs-on: ubuntu-latest
    needs: [tests, lint, check-manifest]
    if: always()

    steps:
      - name: Check if all jobs passed
        run: |
          if [[ "${{ needs.tests.result }}" != "success" ]] || \
             [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.check-manifest.result }}" != "success" ]]; then
            echo "One or more CI checks failed"
            exit 1
          fi
          echo "All CI checks passed successfully!"
