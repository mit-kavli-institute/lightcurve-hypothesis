name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  tests:
    name: Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11", "3.12"]
        include:
          # Test on other platforms with latest Python
          - os: macos-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install nox
      run: |
        python -m pip install --upgrade pip
        python -m pip install nox

    - name: Run tests with nox
      run: |
        nox -s tests-${{ matrix.python-version }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          .coverage
          htmlcov/
          .pytest_cache/
        retention-days: 7

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: tests
    if: always()

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install nox
      run: |
        python -m pip install --upgrade pip
        python -m pip install nox

    - name: Run coverage with nox
      run: |
        nox -s coverage

    - name: Generate coverage XML
      run: |
        pip install coverage[toml]
        coverage xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          htmlcov/
          coverage.xml
          .coverage
        retention-days: 7

  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install nox
      run: |
        python -m pip install --upgrade pip
        python -m pip install nox

    - name: Run quality checks with nox
      run: |
        nox -s quality

    - name: Check with pre-commit
      run: |
        python -m pip install pre-commit
        pre-commit run --all-files --show-diff-on-failure

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install nox
      run: |
        python -m pip install --upgrade pip
        python -m pip install nox

    - name: Run linting with nox
      run: |
        nox -s lint

  type-check:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install nox
      run: |
        python -m pip install --upgrade pip
        python -m pip install nox

    - name: Run type checking with nox
      run: |
        nox -s mypy

  format-check:
    name: Format Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install nox
      run: |
        python -m pip install --upgrade pip
        python -m pip install nox

    - name: Check formatting with nox
      run: |
        nox -s format

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [tests, quality, lint, type-check, format-check]
    if: always()

    steps:
    - name: Verify all checks passed
      run: |
        if [[ "${{ needs.tests.result }}" != "success" ||
              "${{ needs.quality.result }}" != "success" ||
              "${{ needs.lint.result }}" != "success" ||
              "${{ needs.type-check.result }}" != "success" ||
              "${{ needs.format-check.result }}" != "success" ]]; then
          echo "One or more checks failed"
          exit 1
        fi
        echo "All checks passed successfully!"
