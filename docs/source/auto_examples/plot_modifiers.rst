
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_modifiers.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_modifiers.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_modifiers.py:


Lightcurve Modifiers
====================

This example shows how to apply various modifiers to lightcurves
to simulate realistic observational effects.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Import necessary libraries

.. GENERATED FROM PYTHON SOURCE LINES 11-23

.. code-block:: Python


    import matplotlib.pyplot as plt

    from hypothesis_lightcurves.generators import periodic_lightcurves
    from hypothesis_lightcurves.modifiers import (
        add_gaps,
        add_noise,
        add_outliers,
        add_trend,
    )
    from hypothesis_lightcurves.visualization import plot_lightcurve_comparison








.. GENERATED FROM PYTHON SOURCE LINES 24-26

Start with a clean periodic signal
-----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 26-40

.. code-block:: Python


    base_lc = periodic_lightcurves(
        min_points=400,
        max_points=400,
        min_period=1.4,
        max_period=1.6,
        min_amplitude=0.09,
        max_amplitude=0.11,
        with_noise=False,
    ).example()

    fig, ax = base_lc.plot(title="Clean Periodic Signal")
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_modifiers_001.png
   :alt: Clean Periodic Signal
   :srcset: /auto_examples/images/sphx_glr_plot_modifiers_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/williamfong/Documents/Projects/lightcurve-hypothesis/examples/plot_modifiers.py:35: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: periodic_lightcurves(min_points=400, max_points=400, min_period=1.4, max_period=1.6, min_amplitude=0.09, max_amplitude=0.11, with_noise=False))
      ).example()




.. GENERATED FROM PYTHON SOURCE LINES 41-44

Add data gaps
-------------
Simulate observational gaps in the data

.. GENERATED FROM PYTHON SOURCE LINES 44-56

.. code-block:: Python


    lc_with_gaps = add_gaps(base_lc, n_gaps=3, gap_fraction=0.1)

    fig, axes = plot_lightcurve_comparison(
        base_lc, lc_with_gaps, label1="Original", label2="With Gaps", title="Effect of Data Gaps"
    )
    plt.show()

    print(f"Original points: {base_lc.n_points}")
    print(f"After gaps: {lc_with_gaps.n_points}")
    print(f"Points removed: {base_lc.n_points - lc_with_gaps.n_points}")




.. image-sg:: /auto_examples/images/sphx_glr_plot_modifiers_002.png
   :alt: Effect of Data Gaps, Overlay Comparison, Individual Lightcurves
   :srcset: /auto_examples/images/sphx_glr_plot_modifiers_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Original points: 400
    After gaps: 370
    Points removed: 30




.. GENERATED FROM PYTHON SOURCE LINES 57-60

Add outliers
------------
Introduce outlier contamination

.. GENERATED FROM PYTHON SOURCE LINES 60-68

.. code-block:: Python


    lc_with_outliers = add_outliers(base_lc, fraction=0.05, amplitude=5.0)

    fig, axes = plot_lightcurve_comparison(
        base_lc, lc_with_outliers, label1="Clean", label2="With Outliers", title="Outlier Contamination"
    )
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_modifiers_003.png
   :alt: Outlier Contamination, Overlay Comparison, Individual Lightcurves, Residuals (With Outliers - Clean)
   :srcset: /auto_examples/images/sphx_glr_plot_modifiers_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-72

Add systematic trends
---------------------
Apply linear and quadratic trends

.. GENERATED FROM PYTHON SOURCE LINES 72-85

.. code-block:: Python


    lc_linear = add_trend(base_lc, trend_type="linear", coefficient=0.15)
    lc_quadratic = add_trend(base_lc, trend_type="quadratic", coefficient=0.2)

    fig, axes = plt.subplots(3, 1, figsize=(12, 10), sharex=True)

    base_lc.plot(ax=axes[0], title="Original Signal")
    lc_linear.plot(ax=axes[1], title="With Linear Trend", color="C1")
    lc_quadratic.plot(ax=axes[2], title="With Quadratic Trend", color="C2")

    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_modifiers_004.png
   :alt: Original Signal, With Linear Trend, With Quadratic Trend
   :srcset: /auto_examples/images/sphx_glr_plot_modifiers_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 86-89

Combine multiple effects
-------------------------
Create a realistic observational scenario

.. GENERATED FROM PYTHON SOURCE LINES 89-124

.. code-block:: Python


    # Start with periodic signal
    realistic_lc = periodic_lightcurves(
        min_points=500,
        max_points=500,
        min_period=0.7,
        max_period=0.8,
        min_amplitude=0.07,
        max_amplitude=0.09,
        with_noise=True,
    ).example()

    # Apply modifications sequentially
    realistic_lc = add_noise(realistic_lc, level=0.01)
    realistic_lc = add_gaps(realistic_lc, n_gaps=2, gap_fraction=0.08)
    realistic_lc = add_outliers(realistic_lc, fraction=0.02, amplitude=4)
    realistic_lc = add_trend(realistic_lc, trend_type="linear", coefficient=0.05)

    # Plot the result
    fig, ax = realistic_lc.plot(title="Realistic Observational Data")
    ax.text(
        0.02,
        0.98,
        f"Modifications: {', '.join(realistic_lc.modifications)}",
        transform=ax.transAxes,
        fontsize=9,
        va="top",
        bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8),
    )
    plt.show()

    print("Applied modifications:")
    for mod in realistic_lc.modifications:
        print(f"  - {mod}")




.. image-sg:: /auto_examples/images/sphx_glr_plot_modifiers_005.png
   :alt: Realistic Observational Data
   :srcset: /auto_examples/images/sphx_glr_plot_modifiers_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/williamfong/Documents/Projects/lightcurve-hypothesis/examples/plot_modifiers.py:99: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: periodic_lightcurves(min_points=500, max_points=500, min_period=0.7, max_period=0.8, min_amplitude=0.07, max_amplitude=0.09))
      ).example()
    Applied modifications:
      - baseline
      - periodic_signal(period=0.70, amplitude=4.335)
      - noise(gaussian, level=0.043)
      - noise(gaussian, level=0.010)
      - gaps(n=2, fraction=0.08)
      - outliers(fraction=0.020, amplitude=4.0)
      - trend(linear, coef=0.050)




.. GENERATED FROM PYTHON SOURCE LINES 125-127

Visualize the cumulative effect
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 127-158

.. code-block:: Python


    # Create stages of modification
    stages = []
    lc = periodic_lightcurves(
        min_points=300,
        max_points=300,
        min_period=0.9,
        max_period=1.1,
        min_amplitude=0.11,
        max_amplitude=0.13,
        with_noise=False,
    ).example()
    stages.append(("Original", lc.copy()))

    lc = add_noise(lc, level=0.015)
    stages.append(("+ Noise", lc.copy()))

    lc = add_gaps(lc, n_gaps=2, gap_fraction=0.1)
    stages.append(("+ Gaps", lc.copy()))

    lc = add_outliers(lc, fraction=0.03, amplitude=5)
    stages.append(("+ Outliers", lc.copy()))

    # Plot all stages
    fig, axes = plt.subplots(len(stages), 1, figsize=(12, 3 * len(stages)), sharex=True)

    for ax, (label, stage_lc) in zip(axes, stages, strict=False):
        stage_lc.plot(ax=ax, title=label, markersize=3)

    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_modifiers_006.png
   :alt: Original, + Noise, + Gaps, + Outliers
   :srcset: /auto_examples/images/sphx_glr_plot_modifiers_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/williamfong/Documents/Projects/lightcurve-hypothesis/examples/plot_modifiers.py:138: NonInteractiveExampleWarning: The `.example()` method is good for exploring strategies, but should only be used interactively.  We recommend using `@given` for tests - it performs better, saves and replays failures to avoid flakiness, and reports minimal examples. (strategy: periodic_lightcurves(min_points=300, max_points=300, min_period=0.9, max_period=1.1, min_amplitude=0.11, max_amplitude=0.13, with_noise=False))
      ).example()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.533 seconds)


.. _sphx_glr_download_auto_examples_plot_modifiers.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_modifiers.ipynb <plot_modifiers.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_modifiers.py <plot_modifiers.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_modifiers.zip <plot_modifiers.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
